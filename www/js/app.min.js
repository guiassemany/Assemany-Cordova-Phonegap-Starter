'use strict';

var acs = angular.module('AssemanyCordovaStarter', [
      'ngTouch',
      'ngRoute',
      'ngAnimate',
      'ngCordova',
      'ngResource',
      'ngMaterial',
      'ngMdIcons',
      'pascalprecht.translate'
]);

    angular.module('AssemanyCordovaStarter')
    .config(['$routeProvider', '$locationProvider',
      function($routeProvider, $locationProvider) {
        $routeProvider
          .when('/viewA', {
            templateUrl: 'webapp/views/paginaA.html',
            controller: 'PaginaACtrl',
            controllerAs: 'pagina'
          })
          .when('/viewB', {
            templateUrl: 'webapp/views/paginaB.html',
            controller: 'PaginaBCtrl',
            controllerAs: 'paginab'
          })
          .when('/dialogs', {
            templateUrl: 'webapp/views/dialogs.html',
            controller: 'dialogsCtrl',
            controllerAs: 'dialogs'
          })
          .when('/plugin/camera', {
            templateUrl: 'webapp/views/plugins/picture.html',
            controller: 'PictureCtrl',
            controllerAs: 'picture'
          })
          .when('/plugin/deviceInfo', {
            templateUrl: 'webapp/views/plugins/deviceInfo.html',
            controller: 'DeviceInfoCtrl',
            controllerAs: 'device'
          })
          ;


        $routeProvider.otherwise({redirectTo: '/viewA'});
        //$locationProvider.html5Mode(true);

    }])
    .config(["$mdThemingProvider", function($mdThemingProvider) {
      $mdThemingProvider.theme('default')
        .primaryPalette('teal')
        .accentPalette('deep-orange');
    }])
    .config(["$compileProvider", function ($compileProvider){
        $compileProvider.aHrefSanitizationWhitelist(/^\s*(https?|http|ftp|mailto|file|tel):/);
    }])
    .config(["$translateProvider", function($translateProvider) {

      $translateProvider.preferredLanguage('en');
      $translateProvider.useSanitizeValueStrategy('escape');
      $translateProvider.useStaticFilesLoader({
        prefix: 'webapp/languages/',
        suffix: '.json'
      });

    }]);

acs.controller('AppCtrl', ['$scope', '$mdSidenav', '$timeout','$log', '$location', '$translate',  function($scope, $mdSidenav, $timeout, $log, $location, $translate) {

            var itensMenu = [
              {
                  nome: 'View A',
                  icone: 'grade',
                  //iconeCor: 'red',
                  view: 'viewA'
              },
              {
                  nome: 'View B',
                  icone: 'done',
                  //iconeCor: 'pink',
                  view: 'viewB'
              },
              {
                  nome: 'Dialogs',
                  icone: 'chat',
                  //iconeCor: 'pink',
                  view: 'dialogs'
              },
              {
                  nome: 'Camera',
                  icone: 'camera',
                  //iconeCor: 'pink',
                  view: '/plugin/camera'
              },
              {
                  nome: 'Device Info',
                  icone: 'perm_device_info',
                  //iconeCor: 'pink',
                  view: '/plugin/deviceInfo'
              },
            ];

            $scope.selected = null;
            $scope.itensMenu = itensMenu;
            $scope.selecionaItem = selecionaItem;
            $scope.habilitaMenu = habilitaMenu;
            $scope.changeLanguage = changeLanguage;

            function habilitaMenu(name) {
              $mdSidenav(name).toggle();
            }

            function selecionaItem(itemView) {
              $scope.selected = angular.isNumber(itemView) ? $scope.itensMenu[itemView.index] : itemView;
              $location.path(itemView);
              $scope.habilitaMenu('left');
            }

            function changeLanguage(langKey) {
              $translate.use(langKey);
            };

        }]);

acs.controller('DeviceInfoCtrl', [ '$scope', '$cordovaDevice', function($scope, $cordovaDevice) {
  
  document.addEventListener("deviceready", function () {

     $scope.device = $cordovaDevice.getDevice();
     $scope.cordova = $cordovaDevice.getCordova();
     $scope.model = $cordovaDevice.getModel();
     $scope.platform = $cordovaDevice.getPlatform();
     $scope.uuid = $cordovaDevice.getUUID();
     $scope.version = $cordovaDevice.getVersion();

  }, false);

}]);

acs.controller('PictureCtrl', [ '$scope', '$cordovaCamera', function($scope, $cordovaCamera) {

  $scope.takePicture = function() {
    var options = {
      quality: 100,
      destinationType: Camera.DestinationType.FILE_URI,
      sourceType: Camera.PictureSourceType.CAMERA,
      allowEdit: false,
      encodingType: Camera.EncodingType.JPEG,
      //targetWidth: 300,
      //targetHeight: 300,
      popoverOptions: CameraPopoverOptions,
      saveToPhotoAlbum: false
    };

    $cordovaCamera.getPicture(options).then(function(imageData) {
      var image = document.getElementById('myImage');
      image.src = imageData;
    }, function(err) {
      // error
    });
  }

  $scope.cleanPicture = function() {
    var image = document.getElementById('myImage');
    image.src = 'img/no-picture.png';
  }

}]);

acs.controller('dialogsCtrl', ['$scope', '$mdDialog', '$filter', function($scope, $mdDialog, $filter) {
  $scope.status = '  ';
  $scope.showAlert = function(ev) {
    // Appending dialog to document.body to cover sidenav in docs app
    // Modal dialogs should fully cover application
    // to prevent interaction outside of dialog
    $mdDialog.show(
      $mdDialog.alert()
        .parent(angular.element(document.querySelector('#popupContainer')))
        .clickOutsideToClose(true)
        .title($filter('translate')('MESSAGE'))
        .content('Texto do alerta aqui.')
        .ariaLabel('Demonstração de alerta')
        .ok('Entendi!')
        .targetEvent(ev)
    );
  };
  $scope.showConfirm = function(ev) {
    // Appending dialog to document.body to cover sidenav in docs app
    var confirm = $mdDialog.confirm()
          .title($filter('translate')('MESSAGE'))
          .content('Escolha uma das opções.')
          .ariaLabel('Lucky day')
          .ok('Sim!')
          .cancel('Não')
          .targetEvent(ev);
    $mdDialog.show(confirm).then(function() {
      $scope.status = 'Você clicou em sim.';
    }, function() {
      $scope.status = 'Você clicou em não.';
    });
  };
}]);

acs.controller('PaginaACtrl', ["$scope", "$mdSidenav", "$mdUtil", function ($scope,$mdSidenav,$mdUtil) {

}]);

acs.controller('PaginaBCtrl', ["Post", function(Post) {

  var vm = this;

  //$scope.posts = [];

  vm.posts = [];
  Post.query(function(data) {
    vm.posts = data;
  });
  //console.log($scope.posts);

}]);

acs.factory("Post", ["$resource", function($resource) {
  return $resource("http://jsonplaceholder.typicode.com/posts");

}]);

acs.service("testeService",["$q","$http", function ($q,$http) {



}]);
